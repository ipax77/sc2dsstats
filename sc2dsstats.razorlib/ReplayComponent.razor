@using Microsoft.JSInterop
@using pax.BlazorChartJs
@using pax.dsstats.shared
@using sc2dsstats.razorlib.Services
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="row">
    <div class="col-auto">
        <div class="card" style="max-width: 1200px;">
            <div class="card-header">
                <div class="row fw-bolder">
                    <div class="col">@replayDto.GameTime.ToShortDateString()</div>
                    <div class="col">Duration @duration</div>
                    <div class="col">MVP #@mvp</div>
                    <div class="col">@replayDto.GameMode</div>
                    <div class="col-2"><span class="oi oi-x text-danger pointer" @onclick="e => OnCloseRequested.InvokeAsync()"></span></div>
                </div>
            </div>
            <div class="card-body">
                <div class="collapse" id="chartDiv">
                    <ChartComponent @ref="chartComponent" ChartJsConfig="chartJsConfig"></ChartComponent>
                </div>
                <div class="row">
                    @for (int i = 1; i <= 2; i++)
                    {
                        var players = replayDto.Players.Where(x => x.Team == i).OrderBy(o => o.GamePos).ToList();
                        bool isWinner = replayDto.WinnerTeam == i;

                        <div class="col-auto">
                            <div class="d-flex">
                                @if (isWinner)
                                {
                                    <button class="btn btn-sm btn-success"><b>@(replayDto.ReplayEvent != null ? replayDto.ReplayEvent.WinnerTeam : $"Team {i}") - Winner</b></button>
                                }
                                else
                                {
                                    <button class="btn btn-sm btn-danger"><b>@(@replayDto.ReplayEvent != null ? replayDto.ReplayEvent.RunnerTeam : $"Team {i}")</b></button>
                                }
                                <button class="btn btn-sm btn-outline-light" type="button" data-bs-toggle="collapse" data-bs-target="#chartDiv" aria-expanded="false" aria-controls="chartDiv">
                                    Middle @(i == 1 ? mid1 : mid2)%
                                </button>
                            </div>
                            <div class="table-responsive" style="max-width: 500px;">
                                <table class="table table-sm table-hover table-dark pointer">
                                    <thead>
                                        <tr>
                                            <th style="width: 30px;">#</th>
                                            <th style="width: 120px;">Player</th>
                                            <th>APM</th>
                                            <th style="width: 120px;">Cmdr</th>
                                            @*<th>Build</th>*@
                                            <th>Income</th>
                                            <th>Army</th>
                                            <th>Kills</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var player in players)
                                        {
                                            <tr class="@(player.GamePos == mvp ? "table-success" : player.IsUploader ? "table-primary" : "")">
                                                <td>@player.GamePos</td>
                                                <td>
                                                    <span class="d-inline-block text-truncate" style="max-width: 120px;" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="@player.Player.Name">
                                                        @player.Player.Name
                                                    </span>
                                                </td>
                                                <td>@player.APM</td>
                                                <td>
                                                    <div class="d-flex">
                                                        <img src="@HelperService.GetImageSrc(player.Race)"
                                                     alt="@player.Race"
                                                     title="@player.Race"
                                                     width="30"
                                                     height="30" />
                                                        <span><small>@player.Race</small></span>
                                                    </div>
                                                </td>
                                                @*                                                <td>
                                        <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault">
                                        </div>
                                        </td>*@
                                                <td>@HelperService.GetBigNumberString(player.Income)</td>
                                                <td>@HelperService.GetBigNumberString(player.Army)</td>
                                                <td>@HelperService.GetBigNumberString(player.Kills)</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="card-footer">
                <div class="row fw-bolder text-white-50">
                    <div class="col">Views @replayDto.Views</div>
                    <div class="col">Downloads @replayDto.Downloads</div>
                    <div class="col">Bans: @replayDto.ReplayEvent?.Ban1 @replayDto.ReplayEvent?.Ban2</div>
                    <div class="col ms-auto btn-group">
                        <a class="btn btn-dark" href="@NavigationManager.GetUriWithQueryParameters(new Dictionary<string, object?> { ["ReplayHash"] = replayDto.ReplayHash })">Link</a>
                        <a class="btn btn-light" href="@($"{NavigationManager.BaseUri}api/v1/ReplayDownload/{replayDto.ReplayHash}")" download>Download</a>
                        <button type="button" class="btn btn-danger" @onclick="e => OnCloseRequested.InvokeAsync()">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row mt-2 mb-3" style="font-size: 24px;">
    <div class="col-lg-1 col-sm-auto col-md-auto">
        <span class="badge bg-primary">Spawn @(spawn + 1)</span>
    </div>
    <div class="col-auto mt-2">
        @*<label for="spawnrange" class="form-label badge bg-primary">Spawn @(spawn + 1)</label>*@
        <input type="range" class="form-range" value="@spawn" min="1" max="@(SpawnGameloops.Count - 1)" step="1" id="spawnrange" @onchange="MoveSpawn">
    </div>
    <div class="col-auto mt-2">
        <div class="d-flex">
            <button type="button" class="btn btn-outline-light ms-2" @onclick="MoveSpawnLeft"><span class="oi oi-arrow-left"></span></button>
            <button type="button" class="btn btn-outline-light ms-2" @onclick="MoveSpawnRight"><span class="oi oi-arrow-right"></span></button>
        </div>
    </div>
    <div class="col-auto mt-2">
        <div class="d-flex">
            <button type="button" class="btn btn-outline-light ms-2" @onclick="Move3SpawnLeft"><span class="oi oi-arrow-left"> -3</span></button>
            <button type="button" class="btn btn-outline-light ms-2" @onclick="Move3SpawnRight"><span class="oi oi-arrow-right"> +3</span></button>
        </div>
    </div>
</div>

<CascadingValue Value="spawn">
    <ReplaySpawnsComponent replayDto="replayDto" SpawnGameloops="SpawnGameloops"></ReplaySpawnsComponent>
    <div class="btn-group mb-2">
        <span class="me-2 mt-1">
            Show spawn details:
        </span>
        <button class="btn btn-sm btn-outline-light" type="button" data-bs-toggle="collapse" data-bs-target="#unitsDiv" aria-expanded="false" aria-controls="unitsDiv">
            Units
        </button>
        <button class="btn btn-sm btn-outline-light" type="button" data-bs-toggle="collapse" data-bs-target="#upgradesDiv" aria-expanded="false" aria-controls="upgradesDiv">
            Upgrades
        </button>
        <button class="btn btn-sm btn-outline-light" type="button" data-bs-toggle="collapse" data-bs-target="#mapDiv" aria-expanded="false" aria-controls="mapDiv">
            Map
        </button>
    </div>
    <div class="collapse" id="unitsDiv">
        <ReplayUnitsComponent replayDto="replayDto" SpawnGameloops="SpawnGameloops"></ReplayUnitsComponent>
    </div>
    <div class="collapse" id="upgradesDiv">
        <ReplayUpgradesComponent replayDto="replayDto" SpawnGameloops="SpawnGameloops"></ReplayUpgradesComponent>
    </div>
    <div class="collapse" id="mapDiv">
        <ReplayMapComponent replayDto="replayDto" SpawnGameloops="SpawnGameloops"></ReplayMapComponent>
    </div>
</CascadingValue>

@code {
    [Parameter]
    [EditorRequired]
    public ReplayDto replayDto { get; set; } = null!;

    [Parameter]
    public EventCallback OnCloseRequested { get; set; }

    double mid1;
    double mid2;
    int mvp;
    string duration = "";

    HashSet<int> SpawnGameloops = new();
    int spawn = 0;

    private ChartJsConfig chartJsConfig = null!;
    private ChartComponent? chartComponent;

    protected override void OnInitialized()
    {
        Init(replayDto);
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("enableTooltips");
        }
        base.OnAfterRender(firstRender);
    }

    public void Init(ReplayDto replay)
    {
        (int startTeam, int[] gameloops, int totalGameloops) = HelperService.GetMiddleInfo(replay.Middle, replay.Duration);
        (mid1, mid2) = HelperService.GetChartMiddle(startTeam, gameloops, totalGameloops);

        mvp = replay.Players.OrderBy(o => o.Kills).Last().GamePos;
        duration = replay.Duration >= 3600 ?
              $"{TimeSpan.FromSeconds(replay.Duration).ToString(@"hh\:mm\:ss")} h"
            : $"{TimeSpan.FromSeconds(replay.Duration).ToString(@"mm\:ss")} min";
        SpawnGameloops = replay.Players.SelectMany(m => m.Spawns).Select(s => s.Gameloop).OrderBy(o => o).ToHashSet();
        List<int> removeLoops = new();
        for (int i = 1; i < SpawnGameloops.Count; i++)
        {
            if (SpawnGameloops.ElementAt(i) - SpawnGameloops.ElementAt(i - 1) < 144)
            {
                removeLoops.Add(SpawnGameloops.ElementAt(i));
            }
        }
        SpawnGameloops = SpawnGameloops.Except(removeLoops).ToHashSet();

        chartJsConfig = GetMiddleChartConfig(replay.Middle, replay.Duration, replay.WinnerTeam, replay.Cannon, replay.Bunker);
        chartComponent?.DrawChart();
    }

    private void MoveSpawn(ChangeEventArgs e)
    {
        if (int.TryParse(e?.Value?.ToString(), out int value))
        {
            spawn = value;
            StateHasChanged();
        }
    }

    private void MoveSpawnLeft()
    {
        if (spawn > 0)
        {
            spawn -= 1;
            StateHasChanged();
        }
    }

    private void MoveSpawnRight()
    {
        if (SpawnGameloops.Count > spawn + 1)
        {
            spawn += 1;
            StateHasChanged();
        }
    }

    private void Move3SpawnLeft()
    {
        if (spawn > 2)
        {
            spawn -= 3;
            StateHasChanged();
        }
    }

    private void Move3SpawnRight()
    {
        if (SpawnGameloops.Count > spawn + 3)
        {
            spawn += 3;
            StateHasChanged();
        }
    }

    private ChartJsConfig GetMiddleChartConfig(string middle, int duration, int winnerTeam, int cannon, int bunker)
    {
        List<object> team1mid = new List<object>();
        List<object> team2mid = new List<object>();
        List<string> labels = new List<string>();
        List<int> labelLoops = new List<int>();
        int gameloop = 0;
        int sec = 0;

        (int startTeam, int[] gameloops, int totalGameloops) = HelperService.GetMiddleInfo(middle, duration);

        while (gameloop <= totalGameloops)
        {
            labels.Add(sec < 3600 ? TimeSpan.FromSeconds(sec).ToString(@"mm\:ss") : TimeSpan.FromSeconds(sec).ToString(@"hh\:mm\:ss"));
            (double mid1, double mid2) = HelperService.GetChartMiddle(startTeam, gameloops, Math.Min(gameloop, totalGameloops));
            team1mid.Add(mid1);
            team2mid.Add(mid2);
            sec += 30;
            gameloop = (int)(sec * 22.4);
            labelLoops.Add(gameloop);
        }

        List<ArbitraryLineConfig> objectives = new();
        if (cannon > 0)
        {
            int nextLabelLoop = labelLoops.First(f => f > cannon * 22.4);
            objectives.Add(new()
                {
                    XPosition = labelLoops.IndexOf(nextLabelLoop),
                    ArbitraryLineColor = "yellow",
                    Text = "Cannon"
                });
        }
        if (bunker > 0)
        {
            int nextLabelLoop = labelLoops.First(f => f > bunker * 22.4);
            objectives.Add(new()
                {
                    XPosition = labelLoops.IndexOf(nextLabelLoop),
                    ArbitraryLineColor = "yellow",
                    Text = "Bunker"
                });
        }

        return new()
            {
                Type = ChartType.line,
                Data = new ChartJsData()
                {
                    Labels = labels,
                    Datasets = new List<ChartJsDataset>()
                {
                    new LineDataset()
                    {
                        Label = "Team 1",
                        Data = team1mid,
                        BorderColor = winnerTeam == 1 ? "green" : "red",
                        BorderWidth = 3,
                        Fill = false,
                        PointBackgroundColor = new IndexableOption<string>("white"),
                        PointBorderColor = new IndexableOption<string>("yellow"),
                        PointRadius = new IndexableOption<double>(1),
                        PointBorderWidth = new IndexableOption<double>(1),
                        PointHitRadius = new IndexableOption<double>(1),
                        Tension = 0
                    },
                    new LineDataset()
                    {
                        Label = "Team 2",
                        Data = team2mid,
                        BorderColor = winnerTeam == 2 ? "green" : "red",
                        BorderWidth = 3,
                        Fill = false,
                        PointBackgroundColor = new IndexableOption<string>("white"),
                        PointBorderColor = new IndexableOption<string>("yellow"),
                        PointRadius = new IndexableOption<double>(1),
                        PointBorderWidth = new IndexableOption<double>(1),
                        PointHitRadius = new IndexableOption<double>(1),
                        Tension = 0
                    }
                }
                },
                Options = new ChartJsOptions()
                {
                    Responsive = true,
                    Plugins = new Plugins()
                    {
                        ArbitraryLines = objectives,
                        Legend = new Legend()
                        {
                            Position = "top"
                        },
                        Title = new Title()
                        {
                            Display = true,
                            Text = "Middle",
                            Color = "yellow",
                            Font = new Font()
                            {
                                Size = 16
                            }
                        }
                    },
                    Scales = new ChartJsOptionsScales()
                    {
                        X = new LinearAxis()
                        {
                            Display = true,
                            Position = "bottom",
                            BeginAtZero = true,
                            Title = new Title()
                            {
                                Display = true,
                                Text = "GameTime",
                                Color = "yellow",
                            },
                            Ticks = new LinearAxisTick()
                            {
                                Color = "yellow",
                            }
                        },
                        Y = new LinearAxis()
                        {
                            Display = true,
                            BeginAtZero = true,
                            Title = new Title()
                            {
                                Display = true,
                                Text = "%",
                                Color = "yellow",
                            },
                            Ticks = new LinearAxisTick()
                            {
                                Color = "yellow",
                            },
                            Grid = new ChartJsGrid()
                            {
                                Color = "grey",
                            }
                        }
                    }
                }
            };
    }
}
