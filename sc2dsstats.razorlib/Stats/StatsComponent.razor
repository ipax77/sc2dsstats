@using pax.dsstats.shared;
@inject IDataService dataService

<div>
    <CascadingValue Value="StatsRequest">
        <StatsRequestComponent OnRequestChanged="RequestChanged" OnChartOptionsChanged="ChartOptionsChanged"></StatsRequestComponent>
    </CascadingValue>
</div>

<div class="d-flex">
    @if (statsResponse == null)
    {
        <div>
            <span class="badge bg-info" style="font-size: 1rem;">Replays: 0</span>
        </div>
        <div>
            <span class="badge bg-info" style="font-size: 1rem;">Filtered: 0</span>
        </div>
    }
    else
    {
        <div>
            <span class="badge bg-info" style="font-size: 1rem;">Replays: @(StatsRequest.DefaultFilter ? statsResponse.CountDefaultFilter : statsResponse.CountDefaultFilter + statsResponse.CountNotDefaultFilter)</span>
        </div>
        <div>
            <span class="badge bg-info" style="font-size: 1rem;">Filtered: @(StatsRequest.DefaultFilter ? statsResponse.CountNotDefaultFilter : 0)</span>
        </div>
    }
    @if (isLoading)
    {
        <div class="spinner-border text-danger" role="status">
            <span class="visually-hidden" style="font-size: 1rem;">Loading...</span>
        </div>
    }
</div>

@if (statsResponse != null)
{
    <CascadingValue Value="statsResponse">
        <div class="row">
            <div class="col-auto">
                <StatsTable></StatsTable>
            </div>
            <div class="col-8">
                <StatsChart @ref="statsChart"></StatsChart>
            </div>
        </div>
    </CascadingValue>
}

@code {
    [Parameter]
    [EditorRequired]
    public StatsRequest StatsRequest { get; set; } = default!;

    [Parameter]
    public EventCallback OnRequestChanged { get; set; }

    private bool isLoading = false;
    private StatsResponse? statsResponse;
    private object lockobject = new();

    StatsChart? statsChart;

    protected override void OnInitialized()
    {
        _ = LoadData(true);
        base.OnInitialized();
    }

    public void ChartOptionsChanged()
    {
        statsChart?.SetBeginAtZero(StatsRequest.BeginAtZero);
    }

    private void RequestChanged()
    {
        _ = LoadData();
    }

    public async Task LoadData(bool init = false)
    {
        lock (lockobject)
        {
            if (isLoading)
            {
                return;
            }
            isLoading = true;
        }

        if (StatsRequest.StatsMode == StatsMode.Timeline)
        {
            if (StatsRequest.Interest == Commander.None)
            {
                StatsRequest.Interest = Commander.Abathur;
            }
        }

        await InvokeAsync(() => StateHasChanged());
        statsResponse = await dataService.GetStats(StatsRequest);

        statsResponse.Request.BeginAtZero = StatsRequest.BeginAtZero;

        isLoading = false;
        await InvokeAsync(() => StateHasChanged());
        statsChart?.SetChart();

        if (!init)
        {
            await OnRequestChanged.InvokeAsync();
        }
    }
}
