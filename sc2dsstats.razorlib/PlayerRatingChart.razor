@using System.Globalization;
@using pax.dsstats.shared
@using pax.BlazorChartJs
@inject IDataService dataService
@implements IDisposable

<div style="width: 800px;">
    <ChartComponent @ref="chartComponent" ChartJsConfig="chartJsConfig" OnEventTriggered="EventTriggered"></ChartComponent>
</div>
<div style="width: 800px;">
    <ChartComponent @ref="chartComponentStd" ChartJsConfig="chartJsConfigStd" OnEventTriggered="EventTriggered"></ChartComponent>
</div>

@code {
    ChartComponent? chartComponent;
    ChartComponent? chartComponentStd;
    ChartJsConfig chartJsConfig = null!;
    ChartJsConfig chartJsConfigStd = null!;
    EventWaitHandle ewh = new(false, EventResetMode.ManualReset);

    protected override void OnInitialized()
    {
        chartJsConfig = GetLineChartConfig();
        chartJsConfigStd = GetLineChartConfig();
        base.OnInitialized();
    }

    private void EventTriggered(ChartJsEvent e)
    {
        if (e is ChartJsInitEvent initEvent)
        {
            ewh.Set();
        }
    }

    public async Task LoadData(int toonId, string name)
    {
        var ratingsOt = await dataService.GetPlayerRatings(toonId);

        if (String.IsNullOrEmpty(ratingsOt))
        {
            return;
        }

        List<string> labels = new();
        List<double> ratings = new();

        var plRatingsOt = ratingsOt.Split('X');

        for (int j = 0; j < plRatingsOt.Length; j++)
        {
            labels.Clear();
            ratings.Clear();

            var ents = plRatingsOt[j].Split('|');
            for (int i = 0; i < ents.Length; i++)
            {
                var entData = ents[i].Split(',');
                if (double.TryParse(entData[0], NumberStyles.AllowDecimalPoint, CultureInfo.InvariantCulture, out double rating))
                {
                    ratings.Add(Math.Round(rating, 1));
                    labels.Add(entData[1]);
                }
            }

            ewh.WaitOne();

            if (j == 0)
            {
                if (chartJsConfig.Data.Datasets.Any())
                {
                    foreach (var dataset in chartJsConfig.Data.Datasets.ToArray())
                    {
                        chartJsConfig.RemoveDataset(dataset);
                    }
                }
                chartJsConfig.SetLabels(labels);
                chartJsConfig.AddDataset(GetLineDataset(ratings, name));
            }
            else if (j == 1)
            {
                if (chartJsConfigStd.Data.Datasets.Any())
                {
                    foreach (var dataset in chartJsConfigStd.Data.Datasets.ToArray())
                    {
                        chartJsConfigStd.RemoveDataset(dataset);
                    }
                }
                chartJsConfigStd.SetLabels(labels);
                chartJsConfigStd.AddDataset(GetLineDataset(ratings, name, true));
            }
        }
    }

    private LineDataset GetLineDataset(List<double> ratings, string name, bool std = false)
    {
        return new()
            {
                Label = $"{(std ? "Std" : "Cmdr")} {name} development",
                Data = new List<object>(ratings.Cast<object>()),
                BackgroundColor = "lightblue",
                BorderColor = "lightblue",
                BorderWidth = 4,
                Fill = false,
                PointBackgroundColor = new IndexableOption<string>("blue"),
                PointBorderColor = new IndexableOption<string>("blue"),
                PointRadius = new IndexableOption<double>(1),
                PointBorderWidth = new IndexableOption<double>(1),
                PointHitRadius = new IndexableOption<double>(1),
                Tension = 0.4
            };
    }

    private ChartJsConfig GetLineChartConfig()
    {
        return new()
            {
                Type = ChartType.line,
                Data = new ChartJsData()
                {
                    Labels = new List<string>()
                    {
                    },
                    Datasets = new List<ChartJsDataset>()
                    {
                    }
                },
                Options = new ChartJsOptions()
                {
                    Responsive = true,
                    Plugins = new Plugins()
                    {
                        ArbitraryLines = new List<ArbitraryLineConfig>()
                    },
                    Scales = new ChartJsOptionsScales()
                    {
                        X = new LinearAxis()
                        {
                            Display = true,
                            Position = "bottom",
                            Title = new Title()
                            {
                                Display = true,
                                Text = "Rating",
                                Color = "red",
                                Font = new()
                                {
                                    Size = 16
                                },
                                Padding = new()
                                {
                                    Top = 4,
                                    Bottom = 4
                                }
                            },
                            Ticks = new LinearAxisTick()
                            {
                                Color = "red",
                                Padding = 3,
                                AutoSkipPadding = 3,
                                BackdropColor = "rgba(255, 255, 255, 0.75)",
                                Align = "center",
                                CrossAlign = "near",
                                ShowLabelBackdrop = false,
                                BackdropPadding = new Padding(2)
                            },
                            Grid = new ChartJsGrid()
                            {
                                Display = true,
                                Color = "grey",
                                LineWidth = 1,
                                DrawBorder = true,
                                DrawOnChartArea = true,
                                TickLength = 8,
                                TickWidth = 1,
                                TickColor = "red",
                                Offset = false,
                                BorderWidth = 1,
                                BorderColor = "grey"
                            }
                        },
                        Y = new LinearAxis()
                        {
                            Display = true,
                            Ticks = new LinearAxisTick()
                            {
                                Color = "red",
                                Padding = 3,
                                AutoSkipPadding = 3,
                                BackdropColor = "rgba(255, 255, 255, 0.75)",
                                Align = "center",
                                CrossAlign = "near",
                                ShowLabelBackdrop = false,
                                BackdropPadding = new Padding(2)
                            },
                            Grid = new ChartJsGrid()
                            {
                                Display = true,
                                Color = "grey",
                                LineWidth = 1,
                                DrawBorder = true,
                                DrawOnChartArea = true,
                                TickLength = 8,
                                TickWidth = 1,
                                TickColor = "red",
                                Offset = false,
                                BorderWidth = 1,
                                BorderColor = "grey"
                            }
                        }
                    }
                }
            };
    }

    public void Dispose()
    {
        ewh.Dispose();
    }
}
