@page "/ratings"
@using pax.dsstats.dbng.Services
@inject MmrService MmrService
@implements IDisposable

<div class="d-flex mb-2">
    <div>
        <button class="btn btn-sm btn-primary" @onclick="Recalculate">(Re-)Calculate Ratings</button>
    </div>
    @if (isLoading)
    {
        <div class="spinner-border text-danger" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else
    {

    }
</div>
<div>
    <sc2dsstats.razorlib.PlayerRatings @ref="playerRatings"></sc2dsstats.razorlib.PlayerRatings>
</div>
@code {
    private sc2dsstats.razorlib.PlayerRatings? playerRatings;
    private sc2dsstats.razorlib.LoadingIndicator? loadingIndicator;
    private bool isLoading = false;
    private readonly object lockobject = new();

    protected override void OnInitialized()
    {
        MmrService.Recalculated += MmrService_Recalculated;
        base.OnInitialized();
    }

    private async void Recalculate()
    {
        lock (lockobject)
        {
            if (isLoading)
            {
                return;
            }
            isLoading = true;
        }
        loadingIndicator?.SetLoading();

        // ???
        await Task.Run(async () =>
        {
            await MmrService.CalcMmmr().ConfigureAwait(false);
        });

        isLoading = false;
        
        await InvokeAsync(() => StateHasChanged());
    }

    private async void MmrService_Recalculated(object? sender, EventArgs e)
    {
        if (playerRatings != null)
        {
            await playerRatings.Reload();
        }
        isLoading = false;
        loadingIndicator?.UnsetLoading();
    }

    public void Dispose()
    {
        MmrService.Recalculated -= MmrService_Recalculated;
    }
}
